interface _BaseMethods
  def size: -> Integer
  def options: -> options_type

  # private
  def new: () { (coefficient_type value) -> coefficient_type } -> vector_type
         | (in_value_type) { (coefficient_type value) -> coefficient_type } -> vector_type
         | () -> vector_type
         | (in_value_type) -> vector_type
  def real_number?: (real_number value) -> true
                  | (vector_type) -> bool
                  | (in_value_type value) -> false
end

# A class to add together anything.
class VectorNumber < Numeric
  include _BaseMethods
  include VectorNumber::Initializing
  include VectorNumber::Mathing
  include VectorNumber::Enumerating
  include VectorNumber::Comparing
  include VectorNumber::Converting
  include VectorNumber::Querying
  include VectorNumber::Stringifying

  VERSION: String

  KNOWN_OPTIONS: list[Symbol]
  DEFAULT_OPTIONS: options_type

  UNIT: ^(Integer) -> Complex
  R: Complex
  I: Complex

  def self.[]: (*unit_type values, **options_type options) -> vector_type

  def initialize:
    (?(units_list_type | plain_vector_type | vector_type)? values, ?options_type options)
    ?{ (coefficient_type coefficient) -> coefficient_type }
    -> void

  private

  NONE: Object

  @size: Integer
  @options: options_type
  @data: plain_vector_type

  # Private methods for initializing vector numbers.
  module Initializing
    include _BaseMethods
    include Enumerating

    private

    def initialize_from: ((units_list_type | plain_vector_type | vector_type)? values) -> void

    def initialize_contents: () -> void

    def add_value_to_data: ((vector_type | Numeric | unit_type) value) -> void

    def add_numeric_value_to_data: (Numeric value) -> void

    def add_vector_to_data: ((vector_type | plain_vector_type) vector) -> void

    def apply_transform: () ?{ (coefficient_type value) -> coefficient_type } -> void

    def save_options: (options_type? options, ?safe: bool) -> void
    def default_options: () -> options_type
    def known_options: () -> Array[Symbol]

    def finalize_contents: () -> void
  end

  # Methods for performing actual math.
  module Mathing
    include _BaseMethods

    def coerce: (in_value_type) -> [vector_type, self]

    def +@: () -> self

    def -@: () -> vector_type

    def +: (in_value_type) -> vector_type

    def -: (in_value_type) -> vector_type

    def *: (real_number | vector_type) -> vector_type
         | (in_value_type) -> void

    def /: (real_number | vector_type) -> vector_type
         | (in_value_type) -> void
  end

  # Methods for enumerating values of the number.
  module Enumerating
    include _BaseMethods
    include _Each[each_value_type]
    include Enumerable[each_value_type]

    def each: () { (unit_type unit, coefficient_type coefficient) -> void } -> self
            | () -> Enumerator[each_value_type, Integer]
            | ...
    alias each_pair each

    def units: () -> units_list_type
    alias keys units

    def coefficients: () -> coefficients_list_type
    alias values coefficients

    def to_h: () -> plain_vector_type
            | () { (unit_type, coefficient_type) -> each_value_type } -> plain_vector_type
  end

  # Methods for converting to different number classes.
  module Converting
    include _BaseMethods
    include Querying

    def real: () -> real_number

    def imaginary: () -> real_number

    def to_i: () -> Integer
            | () -> void
    alias to_int to_i

    def to_f: () -> Float
            | () -> void

    def to_r: () -> Rational
            | () -> void

    def to_d: (Integer?) -> BigDecimal
            | (Integer?) -> void

    def to_c: () -> Complex
            | () -> void

    private

    def raise_convert_error: (Class) -> void
  end

  # Methods for comparing with other numbers.
  module Comparing
    include _BaseMethods
    include Enumerating
    include Converting
    include Querying

    def ==: (in_value_type other) -> bool

    def eql?: (in_value_type other) -> bool

    def <=>: (in_value_type other) -> Integer?
  end

  # Methods for querying state of the number.
  # Mostly modeled after {::Complex}.
  module Querying
    include Enumerating

    def real?: () -> bool

    def numeric?: (Integer) -> bool
                | (Integer) -> void

    def finite?: () -> bool

    def infinite?: () -> Integer?

    def zero?: () -> bool

    def nonzero?: () -> self?

    def positive?: () -> bool?

    def negative?: () -> bool?
  end

  # Methods and options for string representation.
  module Stringifying
    include Querying

    MULT_STRINGS: Hash[Symbol, String]

    def to_s: (?mult: (Symbol | String)) -> String

    def inspect: () -> String

    private

    def value_to_s: (unit_type unit, coefficient_type coefficient, mult: (Symbol | String)) -> String
  end

  # Refinements of Numeric classes to better work with VectorNumber and similar classes.
  module NumericRefinements
    module CommutativeShuttle
      def <=>: (in_value_type other) -> Integer?
    end

    module BigDecimalToD
      def BigDecimal: (untyped value, exception: bool) -> BigDecimal?
                    | (untyped value, Integer ndigits, exception: bool) -> BigDecimal?
    end
  end
end
